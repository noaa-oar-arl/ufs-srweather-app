#!/usr/bin/env bash

#
#-----------------------------------------------------------------------
#
# This script runs the post-processor (UPP) on the NetCDF output files
# of the write component of the FV3-LAM model.
#
#-----------------------------------------------------------------------
#

#
#-----------------------------------------------------------------------
#
# Source the variable definitions file and the bash utility functions.
#
#-----------------------------------------------------------------------
#
. $USHdir/source_util_funcs.sh
source_config_for_task "task_run_post|task_run_fcst" ${GLOBAL_VAR_DEFNS_FP}
. $USHdir/job_preamble.sh
#
#-----------------------------------------------------------------------
#
# Save current shell options (in a global array).  Then set new options
# for this script/function.
#
#-----------------------------------------------------------------------
#
{ save_shell_opts; . $USHdir/preamble.sh; } > /dev/null 2>&1
#
#-----------------------------------------------------------------------
#
# Get the full path to the file in which this script/function is located 
# (scrfunc_fp), the name of that file (scrfunc_fn), and the directory in
# which the file is located (scrfunc_dir).
#
#-----------------------------------------------------------------------
#
scrfunc_fp=$( $READLINK -f "${BASH_SOURCE[0]}" )
scrfunc_fn=$( basename "${scrfunc_fp}" )
scrfunc_dir=$( dirname "${scrfunc_fp}" )
#
#-----------------------------------------------------------------------
#
# Print message indicating entry into script.
#
#-----------------------------------------------------------------------
#
print_info_msg "
========================================================================
Entering script:  \"${scrfunc_fn}\"
In directory:     \"${scrfunc_dir}\"

This is the J-job script for the task that runs the post-processor (UPP)
on the output files corresponding to a specified forecast hour.
========================================================================"
#
# If SUB_HOURLY_POST is not set to "TRUE", ensure that the forecast 
# minutes (fmn) are set to "00".  This is necessary in order to pass
# "fmn" into the post ex-script for the calculation of post_time.
#
if [ "${SUB_HOURLY_POST}" != "TRUE" ]; then
  export fmn="00"
fi
#
#-----------------------------------------------------------------------
#
# If it doesn't already exist, create the directory (COMOUT) in which 
# to store post-processing output.  (Note that COMOUT may have already 
# been created by this post-processing script for a different output time 
# from the same forecast start time and/or ensemble member.)  Also, create 
# a temporary work directory (DATA_FHR) for the current output time.  This
# will be deleted later after the processing for the current output time
# is complete.  Then change location to DATA_FHR.
#
# Note that there may be a preexisting version of DATA_FHR from previous 
# runs of this script for the current forecast hour (and current forecast
# start time), e.g. from the workflow task that runs this script failing 
# and then being called again.  Thus, we first make sure preexisting 
# versions are deleted.
#
#-----------------------------------------------------------------------
#
if [ "${RUN_ENVIR}" = "community" ]; then
  DATA="${DATA:-${COMIN}${SLASH_ENSMEM_SUBDIR}}"
  export COMOUT="${DATA}/postprd"
  mkdir_vrfy -p "${COMOUT}"
fi

if [ "${SUB_HOURLY_POST}" = "TRUE" ]; then
  export DATA_FHR="${DATA:-$COMOUT}/$fhr$fmn"
else
  export DATA_FHR="${DATA:-$COMOUT}/$fhr"
fi
check_for_preexist_dir_file "${DATA_FHR}" "delete"
mkdir_vrfy -p "${DATA_FHR}"

cd_vrfy "${DATA_FHR}"
#
#-----------------------------------------------------------------------
#
# Make sure that fhr is a non-empty string consisting of only digits.  
#
#-----------------------------------------------------------------------
#
export fhr=$( printf "%s" "${fhr}" | $SED -n -r -e "s/^([0-9]+)$/\1/p" )
if [ -z "$fhr" ]; then
  print_err_msg_exit "\
The forecast hour (fhr) must be a non-empty string consisting of only 
digits:
  fhr = \"${fhr}\""
fi
#
#-----------------------------------------------------------------------
#
# Call the ex-script for this J-job and pass to it the necessary varia-
# bles.
#
#-----------------------------------------------------------------------
#
$SCRIPTSdir/exregional_run_post.sh || \
print_err_msg_exit "\
Call to ex-script corresponding to J-job \"${scrfunc_fn}\" failed."
#
#-----------------------------------------------------------------------
#
# Create a flag file to make rocoto aware that the run_post task has
# successfully completed. This flag is necessary for varying forecast
# hours (FCST_LEN_HRS: -1)
#
#-----------------------------------------------------------------------
#
if [ ${#FCST_LEN_CYCL[@]} -gt 1 ]; then
  cyc_mod=$(( ${cyc} - ${DATE_FIRST_CYCL:8:2} ))
  CYCLE_IDX=$(( ${cyc_mod} / ${INCR_CYCL_FREQ} ))
  FCST_LEN_HRS=${FCST_LEN_CYCL[$CYCLE_IDX]}

  if [ "${WORKFLOW_MANAGER}" = "rocoto" ]; then 
    fcst_len_hrs=$( printf "%03d" "${FCST_LEN_HRS}" ) 
    if [ "${fhr}" = "${fcst_len_hrs}" ]; then
      touch "${DATAROOT}/DATA_SHARE/${PDY}${cyc}/post_${PDY}${cyc}_task_complete.txt"
    fi
  fi
fi
#
#-----------------------------------------------------------------------
#
# Run job postamble.
#
#-----------------------------------------------------------------------
#
fcst_len_hrs=$( printf "%03d" "${FCST_LEN_HRS}" )
if [ "${fhr}" = "${fcst_len_hrs}" ]; then
    job_postamble "TRUE"
else
    job_postamble
fi
#
#-----------------------------------------------------------------------
#
# Restore the shell options saved at the beginning of this script/func-
# tion.
#
#-----------------------------------------------------------------------
#
{ restore_shell_opts; } > /dev/null 2>&1

